import random
import cv2
import math
import numpy as np
import time
import mediapipe as mp

# Webcam setting
cap = cv2.VideoCapture(0)
cap.set(3, 1280)
cap.set(4, 720)

# Hand detector setting
detectMode = False
maxHands = 2
detectionCon = 0.8
minTrackCon = 0.5
detector = mp.solutions.hands
detectHands = detector.Hands(static_image_mode=detectMode, max_num_hands=maxHands,
                                min_detection_confidence=detectionCon,
                                min_tracking_confidence=minTrackCon)

# find function
# x is the raw distance y is the value in cm
x = [290, 222, 190, 160, 135, 122, 108, 97, 90, 84, 79, 73, 69, 64, 61, 59, 57]
y = [20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100]
coff = np.polyfit(x, y, 2) # y = Ax^2 + Bx + C

# Game Variables
cx, cy = 250, 250
color = (255, 0, 0)
counter = 0
score = 0
totalTime = 15
GameStart = 0
gameOver = 0
distanceL = 0
distanceR = 0


# Hands detector function
def findHands(img, draw=True, flipType=True):

    imgRGB = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
    results = detectHands.process(imgRGB)
    allHands = []
    h, w, c = img.shape
    if results.multi_hand_landmarks:
        for handType, handLms in zip(results.multi_handedness, results.multi_hand_landmarks):
            myHand = {}
            # lmList
            mylmList = []
            xList = []
            yList = []
            for id, lm in enumerate(handLms.landmark):
                px, py, pz = int(lm.x * w), int(lm.y * h), int(lm.z * w)
                mylmList.append([px, py, pz])
                xList.append(px)
                yList.append(py)

            # bbox
            xmin, xmax = min(xList), max(xList)
            ymin, ymax = min(yList), max(yList)
            boxW, boxH = xmax - xmin, ymax - ymin
            bbox = xmin, ymin, boxW, boxH
            cx, cy = bbox[0] + (bbox[2] // 2), \
                     bbox[1] + (bbox[3] // 2)

            myHand["lmList"] = mylmList
            myHand["bbox"] = bbox
            myHand["center"] = (cx, cy)

            if flipType:
                if handType.classification[0].label == "Right":
                    myHand["type"] = "Left"
                else:
                    myHand["type"] = "Right"
            else:
                myHand["type"] = handType.classification[0].label
            allHands.append(myHand)

            # draw
            if draw:
                mp.solutions.drawing_utils.draw_landmarks(img, handLms,
                                           mp.solutions.hands.HAND_CONNECTIONS)
                cv2.rectangle(img, (bbox[0] - 20, bbox[1] - 20),
                              (bbox[0] + bbox[2] + 20, bbox[1] + bbox[3] + 20),
                              (255, 0, 255), 2)
                cv2.putText(img, myHand["type"], (bbox[0] - 30, bbox[1] - 30), cv2.FONT_HERSHEY_PLAIN,
                            2, (255, 0, 255), 2)
    if draw:
        return allHands, img
    else:
        return allHands


def putTextRect(img, text, pos, scale=3, thickness=3, colorT=(255, 255, 255),
                colorR=(255, 0, 255), font=cv2.FONT_HERSHEY_PLAIN,
                offset=10, border=None, colorB=(0, 255, 0)):
    """
    Creates Text with Rectangle Background
    :param img: Image to put text rect on
    :param text: Text inside the rect
    :param pos: Starting position of the rect x1,y1
    :param scale: Scale of the text
    :param thickness: Thickness of the text
    :param colorT: Color of the Text
    :param colorR: Color of the Rectangle
    :param font: Font used. Must be cv2.FONT....
    :param offset: Clearance around the text
    :param border: Outline around the rect
    :param colorB: Color of the outline
    :return: image, rect (x1,y1,x2,y2)
    """
    ox, oy = pos
    (w, h), _ = cv2.getTextSize(text, font, scale, thickness)

    x1, y1, x2, y2 = ox - offset, oy + offset, ox + w + offset, oy - h - offset

    cv2.rectangle(img, (x1, y1), (x2, y2), colorR, cv2.FILLED)
    if border is not None:
        cv2.rectangle(img, (x1, y1), (x2, y2), colorB, border)
    cv2.putText(img, text, (ox, oy), font, scale, colorT, thickness)

    return img, [x1, y2, x2, y1]


# Right hand event
def RightHandDis():
    global counter
    rx1, ry1, rc1 = lmListR[5]
    rx2, ry2, rc2 = lmListR[17]

    # calculation of the diagonal distance
    distance = math.sqrt((ry2 - ry1) ** 2 + (rx2 - rx1) ** 2)

    rA, rB, rC = coff
    distanceRCM = rA * distance ** 2 + rB * distance + rC

    if distanceRCM < 150:
        if Rx < cx < Rx + Rw and Ry < cy < Ry + Rh:
            counter = 1

    return counter, distanceRCM


# Left hand event
def LeftHandDis():
    global counter
    lx1, ly1, lc1 = lmListL[5]
    lx2, ly2, lc2 = lmListL[17]

    distance = math.sqrt((ly2 - ly1) ** 2 + (lx2 - lx1) ** 2)

    lA, lB, lC = coff
    distanceLCM = lA * distance ** 2 + lB * distance + lC

    if distanceLCM < 150:
        if Lx < cx < Lx + Lw and Ly < cy < Ly + Lh:
            counter = 1

    return counter, distanceLCM


# event happen when the button pressed
def checkCounter():
    global counter, color, cx, cy, score
    if counter:
        print(counter)
        counter += 1
        print(counter)
        color = (0, 255, 0)
        if counter == 3:
            cx = random.randint(100, 1100)
            cy = random.randint(100, 600)
            color = (255, 0, 0)
            score += 1
            counter = 0

    return counter, cx, cy, color, score


# checking how many hands on the screen and check the condition of the event met
def checkHands():
    global lmListR, lmListL, counter, Rx, Ry, Rw, Rh, Lx, Ly, Lw, Lh, distanceL, distanceR
    if hands:
        if len(hands) == 1:
            if hands[0]['type'] == 'Right':
                lmListR = hands[0]['lmList']
                Rx, Ry, Rw, Rh = hands[0]['bbox']
                cv2.rectangle(img, (Rx, Ry), (Rx + Rw, Ry + Rh), (255, 0, 255), 3)
                counter, distanceR = RightHandDis()

            elif hands[0]['type'] == 'Left':
                lmListL = hands[0]['lmList']
                Lx, Ly, Lw, Lh = hands[0]['bbox']
                cv2.rectangle(img, (Lx, Ly), (Lx + Lw, Ly + Lh), (255, 0, 255), 3)
                counter, distanceL = LeftHandDis()

        elif len(hands) == 2:
            if hands[0]['type'] == 'Right':
                lmListR = hands[0]['lmList']
                Rx, Ry, Rw, Rh = hands[0]['bbox']
                cv2.rectangle(img, (Rx, Ry), (Rx + Rw, Ry + Rh), (255, 0, 255), 3)
                counter, distanceR = RightHandDis()
            else:
                lmListR = hands[1]['lmList']
                Rx, Ry, Rw, Rh = hands[1]['bbox']
                cv2.rectangle(img, (Rx, Ry), (Rx + Rw, Ry + Rh), (255, 0, 255), 3)
                counter, distanceR = RightHandDis()

            if hands[0]['type'] == 'Left':
                lmListL = hands[0]['lmList']
                Lx, Ly, Lw, Lh = hands[0]['bbox']
                cv2.rectangle(img, (Lx, Ly), (Lx + Lw, Ly + Lh), (255, 0, 255), 3)
                counter, distanceL = LeftHandDis()
            else:
                lmListL = hands[1]['lmList']
                Lx, Ly, Lw, Lh = hands[1]['bbox']
                cv2.rectangle(img, (Lx, Ly), (Lx + Lw, Ly + Lh), (255, 0, 255), 3)
                counter, distanceL = LeftHandDis()


# Loop
while True:
    success, img = cap.read()
    img = cv2.flip(img, 1)

    if GameStart == 0:
        # Ready HUD
        putTextRect(img, 'Ready?', (550, 400), scale=5, offset=30, thickness=7)
        putTextRect(img, 'Please move away from the webcam until distance more than 100', (100, 500), scale=2, offset=10)
        putTextRect(img, f'DistanceR: {round(distanceR)}', (100, 600), scale=2, offset=10)
        putTextRect(img, f'DistanceL: {round(distanceL)}', (500, 600), scale=2, offset=10)

        hands, img = findHands(img, flipType=False)

        checkHands()

        if hands:
            pass
        else:
            distanceR = 0
            distanceL = 0

        # remind user to move away from the webcam
        if distanceR > 100 or distanceL > 100:
            print(distanceR, distanceL)
            timeStart = time.time()
            GameStart = 1

    # Game start
    if GameStart == 1:
        if time.time() - timeStart < totalTime:

            hands, img = findHands(img, flipType=False)

            checkHands()

            counter, cx, cy, color, score = checkCounter()

            # Draw Circle
            cv2.circle(img, (cx, cy), 30, color, cv2.FILLED)
            cv2.circle(img, (cx, cy), 10, (255, 255, 255), cv2.FILLED)
            cv2.circle(img, (cx, cy), 20, (255, 255, 255), 2)
            cv2.circle(img, (cx, cy), 30, (50, 50, 50), 2)

            # Game HUD
            putTextRect(img, f'Time: {int(totalTime-(time.time()-timeStart))}', (1000, 75), scale=3, offset=20)
            putTextRect(img, f'Score: {str(score).zfill(2)}', (100, 75), scale=3, offset=20)

        else:
            # Game end event
            gameOver = 1
            putTextRect(img, 'End', (550, 400), scale=5, offset=30, thickness=7)
            putTextRect(img, f'Score: {score}', (525, 500), scale=3, offset=20)
            putTextRect(img, 'Press R to restart', (475, 575), scale=2, offset=10)

    cv2.imshow('Game', img)
    key = cv2.waitKey(1)

    # restart event
    if key == ord('r') and gameOver == 1:
        timeStart = time.time()
        score = 0
        gameOver = 0
        GameStart = 0

